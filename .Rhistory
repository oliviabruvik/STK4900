library(dplyr)
library(glmnet)
library(EveTemplate)
library(neurobase)
library(coefplot)
library(kableExtra)
library(formatR)
library(selectiveInference)
library(here)
library(stringr)
library(ggplot2)
#load(here('processed_data2/distinct_datasets.rda'))
load(here('processed_data2/distinct_datasets_t2flair_tlv.rda'))
bicams_data_distinct <- bicams_data_distinct %>%
transmute(ID = subject,
tlv = tlv,
calculated_log_tlv = log(tlv))
#
# ## Read in bicams data - standardized
# st_bicams_data <- read_excel(here('raw_data/BICAMS Paper Combined Data.xlsx')) %>%
#   rename(TLV = `FLAIR TLV (mm3)`) %>%
#   transmute(ID = stringr::str_pad(ID, 4, pad = '0'),
#             SDMT = ...25,
#             CVLT = ...33,
#             BVMT = ...41,
#             EDSS = EDSS,
#             EDSS_log = log(EDSS + 0.01)) %>%
#   filter(!is.na(ID)) %>%
#   distinct()
#   # filter(!(CVLT == 't-score'))
#
# ##FIX
# st_bicams_data$BVMT[st_bicams_data$BVMT == '< 20'] <- 20
# st_bicams_data$CVLT[st_bicams_data$CVLT == '46-47'] <- 47
#
# bicams_patient_data <- st_bicams_data %>%
#   mutate(CVLT = as.numeric(CVLT),
#          BVMT = as.numeric(BVMT),
#          SDMT = as.numeric(SDMT))
## Read in bicams data - raw
bicams_patient_data <- read_excel(here('raw_data/BICAMS Paper Combined Data W T2_Tx_Sandra.xlsx')) %>%
filter(!is.na(MSID)) %>%
transmute(ID = substr(MSID, 3, 6),
SDMT = `SDMT T1`,
SDMT_z = ...29,
CVLT = ...36,
CVLT_t = ...37,
BVMT = ...43,
BVMT_t = ...45,
cort = `Cortical Thickness`,
TLV = `FLAIR TLV (mm3)`,
log_tlv = log(TLV),
EDSS = `EDSS T1`,
EDSS_log = log(EDSS + add_to_EDSS),
n_rim = `Number of Rim+ Lesions`) %>%
distinct()
# bicams_patient_data <- read_excel(here('raw_data/BICAMS Paper Combined Data.xlsx'),
#                            sheet = 'Patient Data') %>%
#   filter(!is.na(MSID)) %>%
#   transmute(ID = substr(MSID, 3, 6),
#             SDMT = SDMT,
#             SDMT_z = `z-score`,
#             CVLT = ...31,
#             CVLT_t = ...32,
#             BVMT = ...38,
#             BVMT_t = ...40,
#             cort = `Cortical Thickness - CORRECTED`,
#             TLV = `FLAIR TLV (mm3)`,
#             log_tlv = log(TLV),
#             EDSS = EDSS,
#             EDSS_log = log(EDSS + add_to_EDSS)) %>%
#   distinct()
#
# bicams_patient_data[89, 'CVLT'] <- '40'
# bicams_patient_data[89, 'CVLT_t'] <- '41'
bicams_patient_data$BVMT_t[bicams_patient_data$BVMT_t == '< 20'] <- 20
bicams_patient_data$CVLT_t[bicams_patient_data$CVLT_t == '46-47'] <- 47
bicams_patient_data <- bicams_patient_data %>%
mutate(SDMT = as.numeric(SDMT),
SDMT_z = as.numeric(SDMT_z),
CVLT = as.numeric(CVLT),
CVLT_t = as.numeric(CVLT_t),
BVMT = as.numeric(BVMT),
BVMT_t = as.numeric(BVMT_t),
cort = as.numeric(cort))
if (n_rim == 'binary') {
bicams_patient_data$n_rim[bicams_patient_data$n_rim > 0] <- 1
}
if (reproduce_prev_results) {
## Read in bicams data - raw
raw_bicams_data <- read_excel(here('raw_data/BICAMS Paper Combined Data.xlsx')) %>%
filter(!is.na(MSID)) %>%
rename(TLV = `FLAIR TLV (mm3)`) %>%
transmute(ID = stringr::str_pad(ID, 4, pad = '0'),
SDMT = as.numeric(SDMT),
CVLT = as.numeric(...32),
BVMT = as.numeric(...39),
##log_tlv = log(TLV),
EDSS = as.numeric(EDSS),
EDSS_log = log(EDSS + 0.01),
cort = as.numeric(cort)) %>%
distinct()
bicams_patient_data <- raw_bicams_data
}
## Get TLV
# bicams_patient_data <- left_join(bicams_data_distinct, bicams_patient_data) %>%
bicams_patient_data <- full_join(bicams_data_distinct, bicams_patient_data) %>%
filter(ID != 1889) %>%
filter(ID != 1260) %>%
dplyr::arrange(ID)
# st_bicams_data <- left_join(bicams_data_distinct, st_bicams_data)
# raw_bicams_data <- left_join(bicams_data_distinct, raw_bicams_data)
#mutate(log_tlv = log(tlv))
threshold_fraction = 0.1
threshold = floor(nrow(bicams_data_distinct) * threshold_fraction)
## load eve atlas
eve_t1 <- readEve()
map <- readEveMap(type='I')
## Pull lesion data
#load(here('processed_data/bicams_percent_coverage_matrices.rda'))
load(here('reproducible_processed_data/bicams_percent_coverage_matrices.rda'))
# ifelse(cleaned_ventricles,
#   load(here('processed_data/bicams_cleaned_percent_coverage_matrices.rda')),
#   ifelse(seed_data,
#          #load(here('reproducible_processed_data/bicams_percent_coverage_matrices.rda')), # data from 27/5
#          load(here('processed_data2/bicams_percent_coverage_matrices.rda')),  # data from 25/5)
#          load(here('processed_data/bicams_percent_coverage_matrices.rda')))) # data from 27/1)
# #
## Structures
if (structure_analysis) {
labels <- getEveMapLabels(type='I') %>%
dplyr::mutate(regions = paste0('region_', integer_label)) %>%
dplyr::select(regions,
text_label,
region_labels = integer_label,
structure)
labels <- labels %>%
filter(region_labels != 0) %>%
group_by(structure) %>%
summarize(regions)
labels$structure[labels$structure == 'fornix_(column_and_body)'] <- 'fornix'
bicams_rim_percent_coverage[is.na(bicams_rim_percent_coverage)] <- 0
bicams_non_rim_percent_coverage[is.na(bicams_non_rim_percent_coverage)] <- 0
structure_rim_coverage <- data.frame(matrix(ncol = 88, nrow = 174))
colnames(structure_rim_coverage) <- unique(labels$structure)
structure_rim_coverage$ID <- bicams_rim_percent_coverage$ID
structure_non_rim_coverage <- structure_rim_coverage
for (i in unique(labels$structure)) {
regions <- filter(labels, structure == i)$regions
structure_rim_coverage[,i] <- bicams_rim_percent_coverage[regions[1]] + bicams_rim_percent_coverage[regions[2]]
}
for (i in unique(labels$structure)) {
regions <- filter(labels, structure == i)$regions
structure_non_rim_coverage[,i] <- bicams_non_rim_percent_coverage[regions[1]] + bicams_non_rim_percent_coverage[regions[2]]
}
if (collapsed_structures) {
structure_non_rim_coverage <- structure_non_rim_coverage %>%
transmute(amygdala,
angular_gyrus,
angular_wm,
corona_radiata = anterior_corona_radiata + posterior_corona_radiata + superior_corona_radiata,
limb_of_internal_capsule = anterior_limb_of_internal_capsule + posterior_limb_of_internal_capsule,
corpus_callosum = body_of_corpus_callosum + genu_of_corpus_callosum + splenium_of_corpus_callosum,
caudate_nucleus,
cerebellum = cerebellum + cerebellum_wm,
cerebral_peduncle = inferior_cerebellar_peduncle + cerebral_peduncle + middle_cerebellar_peduncle + superior_cerebellar_peduncle,
cingulum = `cingulum_(cingulate_gyrus)` + `cingulum_(hippocampus)` + `cingulum_wm` + cingulate_gyrus,
corticospinal_tract,
cuneus = cuneus + cuneus_wm,
entorhinal_area,
external_capsule,
fornix = fornix + `fornix(cres)_stria_terminalis`,
fusiform = fusiform_gyrus + fusiform_wm,
globus_pallidus,
gyrus_rectus,
hippocampus,
frontal_gyrus = inferior_frontal_gyrus + middle_frontal_gyrus + superior_frontal_gyrus,
frontal_wm = inferior_frontal_wm + middle_frontal_wm + superior_frontal_wm,
fronto_occipital_fasciculus = inferior_fronto_occipital_fasciculus + superior_fronto_occipital_fasciculus,
occipital_gyrus = inferior_occipital_gyrus + middle_occipital_gyrus + superior_occipital_gyrus,
occipital_wm = middle_occipital_wm + inferior_occipital_wm + superior_occipital_wm,
temporal_gyrus = inferior_temporal_gyrus + middle_temporal_gyrus + superior_temporal_gyrus,
temporal_wm = middle_temporal_wm + inferior_temporal_wm + superior_temporal_wm,
insular,
orbital_gyrus = lateral_fronto_orbital_gyrus + middle_fronto_orbital_gyrus,
orbital_wm = lateral_fronto_orbital_wm + middle_fronto_orbital_wm,
lingual = lingual_gyrus + lingual_wm,
medial_lemniscus,
medulla,
midbrain,
parahippocampal_gyrus,
pons,
pontine_crossing_tract,
postcentral_gyrus,
posterior_thalamic_radiation,
pre_cuneus = pre_cuneus + pre_cuneus_wm,
precentral_gyrus,
putamen,
rectus_wm,
red_nucleus,
retrolenticular_part_of_internal_capsule,
sagittal_stratum,
substancia_nigra,
superior_longitudinal_fasciculus,
superior_parietal_lobule,
superior_parietal_wm,
supramarginal_wm,
tapatum,
uncinate_fasciculus,
ID = ID)
structure_rim_coverage <- structure_rim_coverage %>%
transmute(amygdala,
angular_gyrus,
angular_wm,
corona_radiata = anterior_corona_radiata + posterior_corona_radiata + superior_corona_radiata,
limb_of_internal_capsule = anterior_limb_of_internal_capsule + posterior_limb_of_internal_capsule,
corpus_callosum = body_of_corpus_callosum + genu_of_corpus_callosum + splenium_of_corpus_callosum,
caudate_nucleus,
cerebellum = cerebellum + cerebellum_wm,
cerebral_peduncle = inferior_cerebellar_peduncle + cerebral_peduncle + middle_cerebellar_peduncle + superior_cerebellar_peduncle,
cingulum = `cingulum_(cingulate_gyrus)` + `cingulum_(hippocampus)` + `cingulum_wm` + cingulate_gyrus,
corticospinal_tract,
cuneus = cuneus + cuneus_wm,
entorhinal_area,
external_capsule,
fornix = fornix + `fornix(cres)_stria_terminalis`,
fusiform = fusiform_gyrus + fusiform_wm,
globus_pallidus,
gyrus_rectus,
hippocampus,
frontal_gyrus = inferior_frontal_gyrus + middle_frontal_gyrus + superior_frontal_gyrus,
frontal_wm = inferior_frontal_wm + middle_frontal_wm + superior_frontal_wm,
fronto_occipital_fasciculus = inferior_fronto_occipital_fasciculus + superior_fronto_occipital_fasciculus,
occipital_gyrus = inferior_occipital_gyrus + middle_occipital_gyrus + superior_occipital_gyrus,
occipital_wm = middle_occipital_wm + inferior_occipital_wm + superior_occipital_wm,
temporal_gyrus = inferior_temporal_gyrus + middle_temporal_gyrus + superior_temporal_gyrus,
temporal_wm = middle_temporal_wm + inferior_temporal_wm + superior_temporal_wm,
insular,
orbital_gyrus = lateral_fronto_orbital_gyrus + middle_fronto_orbital_gyrus,
orbital_wm = lateral_fronto_orbital_wm + middle_fronto_orbital_wm,
lingual = lingual_gyrus + lingual_wm,
medial_lemniscus,
medulla,
midbrain,
parahippocampal_gyrus,
pons,
pontine_crossing_tract,
postcentral_gyrus,
posterior_thalamic_radiation,
pre_cuneus = pre_cuneus + pre_cuneus_wm,
precentral_gyrus,
putamen,
rectus_wm,
red_nucleus,
retrolenticular_part_of_internal_capsule,
sagittal_stratum,
substancia_nigra,
superior_longitudinal_fasciculus,
superior_parietal_lobule,
superior_parietal_wm,
supramarginal_wm,
tapatum,
uncinate_fasciculus,
ID = ID)
}
structure_rim_coverage[structure_rim_coverage == 0] <- NA
structure_non_rim_coverage[structure_non_rim_coverage == 0] <- NA
bicams_rim_data <- structure_rim_coverage %>%
#dplyr::select_if(vars(length(na.omit(.)) >= 34))
dplyr::select_if(vars(length(na.omit(.)) >= floor(nrow(bicams_data_distinct) * threshold_fraction)))
bicams_non_rim_data <- structure_non_rim_coverage %>%
#dplyr::select_if(vars(length(na.omit(.)) >= 34))
dplyr::select_if(vars(length(na.omit(.)) >= floor(nrow(bicams_data_distinct) * threshold_fraction)))
#dplyr::select_if(~ !is.numeric(.) || sum(.) != 0)
} else {
bicams_rim_data <- bicams_rim_percent_coverage %>%
dplyr::select_if(vars(length(na.omit(.)) >= floor(nrow(bicams_data_distinct) * threshold_fraction))) %>%
dplyr::select(-region_0)
bicams_non_rim_data <- bicams_non_rim_percent_coverage %>%
dplyr::select_if(vars(length(na.omit(.)) >= floor(nrow(bicams_data_distinct) * threshold_fraction))) %>%
dplyr::select(-region_0)
}
if (binarize) {
ID <- bicams_non_rim_data$ID
bicams_non_rim_data[bicams_non_rim_data > 0] <- 1
bicams_non_rim_data$ID <- ID
ID <- bicams_rim_data$ID
bicams_rim_data[bicams_rim_data > 0] <- 1
bicams_rim_data$ID <- ID
}
## Merge lesion and BICAMS data
# raw_bicams_rim_data <- bicams_rim_data %>%
#   left_join(raw_bicams_data)
# raw_bicams_non_rim_data <- bicams_non_rim_data %>%
#   left_join(raw_bicams_data)
#
# st_bicams_rim_data <- bicams_rim_data %>%
#   left_join(st_bicams_data)
# st_bicams_non_rim_data <- bicams_non_rim_data %>%
#   left_join(st_bicams_data)
bicams_rim_data <- bicams_rim_data %>%
left_join(bicams_patient_data)
bicams_non_rim_data <- bicams_non_rim_data %>%
left_join(bicams_patient_data)
sdmt_rim_data <- bicams_rim_data %>%
filter(!is.na(SDMT))
sdmt_non_rim_data <- bicams_non_rim_data %>%
filter(!is.na(SDMT))
bicams_non_rim_data[is.na(bicams_non_rim_data)] <- 0
bicams_rim_data[is.na(bicams_rim_data)] <- 0
sdmt_non_rim_data[is.na(sdmt_non_rim_data)] <- 0
sdmt_rim_data[is.na(sdmt_rim_data)] <- 0
# raw_bicams_non_rim_data[is.na(raw_bicams_non_rim_data)] <- 0
# raw_bicams_rim_data[is.na(raw_bicams_rim_data)] <- 0
#
# st_bicams_non_rim_data[is.na(st_bicams_non_rim_data)] <- 0
# st_bicams_rim_data[is.na(st_bicams_rim_data)] <- 0
## rim_regions <- regions('EDSS_log', rim_data.x, rim_data)
# extracting regions and p-values
get_glm_results <- function(test, data, tlv) {
set.seed(12)
data.x <- data %>%
dplyr::select(-colnames(bicams_patient_data))
if (cort) {
data.x$cort <- data$cort
data <- filter(data, cort != 0)
data.x <- filter(data.x, cort != 0)
}
if (n_rim == 'binary' | n_rim == 'digit') {
data.x$n_rim <- data$n_rim
}
if (tlv) {
data.x$log_tlv <- data[,tlv_type]
}
# if (tlv) {
#   data.x <- data %>%
#     dplyr::select(starts_with('region') | starts_with(tlv_type))
#   } else {
#     data.x <- data %>%
#       dplyr::select(starts_with('region'))
#   }
# center x
x <- as.matrix(data.x)
x <- scale(x,TRUE,TRUE)
y <-  unlist(dplyr::select(data, all_of(test))) #y <-  data[[test]]
n <- dim(x)[1]
cvfit <- cv.glmnet(x = x,
y = y)
gfit <- glmnet(x = x,
y = y,
standardize = FALSE)
#standardize = TRUE)
beta <- coef(gfit,
x = x,
y = y,,
s = cvfit$lambda.min,
exact = TRUE)[-1]
sigmahat <- estimateSigma(x = x,
y = y,
intercept = TRUE,
standardize = FALSE)$sigmahat
#standardize = TRUE)$sigmahat
pvalues <- try(fixedLassoInf(x = x,
y = y,
beta = beta,
lambda = cvfit$lambda.min * n,
sigma = sigmahat,
intercept = TRUE,
type='partial')) #'full')
if (class(pvalues) == 'try-error') {
glm_results <- pvalues[1]
} else {
glm_results <- data.frame(regions = names(pvalues$vars),
coef = as.numeric(pvalues$coef0),
p_values = pvalues$pv) %>%
filter(regions != tlv_type)
labels <- getEveMapLabels(type='I') %>%
dplyr::mutate(regions = paste0('region_', integer_label)) %>%
dplyr::select(regions, text_label, region_labels = integer_label)
glm_results <- glm_results %>%
filter(p_values <= 0.05)
#plots(test, glm_results, data)
glm_results <- glm_results %>%
left_join(labels) %>%
kbl(col.names = c('Regions', 'Coefficient', 'P-value', 'Region', 'Region label'),
caption = paste0('Selected regions for ', i)) %>%
#position = h) %>%
kable_styling()
}
return(glm_results)
}
## mapping regions
atlas <- function(test, glm_results, text) {
regions <- glm_results[,'region_labels']
map <- readEveMap(type='I')
map[!(map %in% regions)] <- 0
if (length(regions) == 0) {
print(paste0('There were no regions selected in the analysis of ', text))
} else {
ortho2(eve_t1, map, text = text, legend = 'lesions')
}
}
# plotting test scores
plots <- function(test, glm_results, data) {
regions <- glm_results[,'regions']
for (i in regions) {
ab <- lm(data[[i]] ~ data[[test]])
plot(data[[i]], data[[test]], ylab = paste0(test,' score'), xlab = 'Percent Coverage', main = paste0('Region ', i))
abline(ab)
}
}
EDSS_plot <- ggplot(bicams_rim_data, aes(x = EDSS)) +
#geom_bar(stat = 'identity', fill='steelblue') +
geom_bar(fill = 'steelblue') +
xlab('EDSS') +
ylab('Number of Subjects') +
ggtitle('Distribution of Expanded Disability Status Scores in Patient Cohort') +
scale_y_continuous(breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80)) +
scale_x_continuous(breaks = seq(0, 10, by = 0.5))
EDSS_plot
for (i in c('CVLT', 'SDMT', 'BVMT', 'EDSS', 'EDSS_log')) {
#for (j in list(bicams_rim_data, bicams_non_rim_data)) {
rim_glm_results <- get_glm_results(i, bicams_rim_data, tlv=TRUE)
if (i == 'SDMT' | i == 'SDMT_z') {
rim_glm_results <- get_glm_results(i, sdmt_rim_data, tlv=TRUE)
}
print(rim_glm_results)
#plots(i, rim_glm_results, bicams_rim_data)
}
for (i in c('CVLT', 'SDMT', 'BVMT', 'EDSS', 'EDSS_log')) {
#for (j in list(bicams_rim_data, bicams_non_rim_data)) {
non_rim_glm_results <- get_glm_results(i, bicams_non_rim_data, tlv=TRUE)
if (i == 'SDMT' | i == 'SDMT_z') {
non_rim_glm_results <- get_glm_results(i, sdmt_non_rim_data, tlv=TRUE)
}
print(non_rim_glm_results)
}
lm <- glm(bicams_rim_data$CVLT ~ bicams_non_rim_data$region_36 + bicams_rim_data$region_36)
summary(lm)
lm2 <- glm(bicams_rim_data$CVLT ~ bicams_non_rim_data$region_127 + bicams_rim_data$region_127)
summary(lm2)
View(bicams_non_rim_data)
summary(glm(bicams_rim_data$EDSS ~ bicams_non_rim_data$region_36 + bicams_rim_data$region_36))
summary(glm(bicams_rim_data$EDSS ~ bicams_non_rim_data$region_127 + bicams_rim_data$region_127))
for (i in c('CVLT', 'SDMT', 'BVMT', 'EDSS', 'EDSS_log')) {
glm_results <- get_glm_results(i, bicams_rim_data, tlv=FALSE)
if (i == 'SDMT' | i == 'SDMT_z') {
glm_results <- get_glm_results(i, sdmt_rim_data, tlv=FALSE)
}
print(glm_results)
}
summary(glm(bicams_rim_data$EDSS ~ bicams_non_rim_data$region_127 + bicams_rim_data$region_127 + bicams_rim_data$log_tlv))
summary(glm(bicams_rim_data$EDSS ~ bicams_non_rim_data$region_126 + bicams_rim_data$region_126 + bicams_rim_data$log_tlv))
summary(glm(bicams_rim_data$CVLT ~ bicams_non_rim_data$region_127 + bicams_rim_data$region_127 + bicams_rim_data$log_tlv))
summary(glm(bicams_rim_data$EDSS ~ bicams_non_rim_data$region_127 + bicams_rim_data$region_127 + bicams_rim_data$log_tlv))
summary(glm(bicams_rim_data$EDSS ~ bicams_non_rim_data$region_36 + bicams_rim_data$region_36 + bicams_rim_data$log_tlv))
summary(glm(bicams_rim_data$CVLT ~ bicams_non_rim_data$region_127 + bicams_rim_data$region_127 + bicams_rim_data$log_tlv))
lm2
?glm
summary(glm(bicams_rim_data$CVLT ~ bicams_non_rim_data$region_127 +
bicams_rim_data$region_127, family = "gaussian"))
summary(glm(bicams_rim_data$CVLT ~ bicams_non_rim_data$region_127 +
+                 bicams_rim_data$region_127))
summary(lm2)
summary(glm(bicams_rim_data$CVLT ~ bicams_non_rim_data$region_127 + bicams_rim_data$region_127 + bicams_rim_data$log_tlv))
summary(glm(bicams_rim_data$CVLT ~ bicams_non_rim_data$region_127 + bicams_rim_data$region_127 + bicams_rim_data$log_tlv, family = "gaussian"))
knitr::opts_chunk$set(echo = TRUE)
cont=c(0.228, 0.207, 0.234, 0.220, 0.217, 0.228, 0.209, 0.221, 0.204, 0.220,
0.203, 0.219, 0.218, 0.245, 0.210)
treat=c(0.250, 0.237, 0.217, 0.206, 0.247, 0.228, 0.245, 0.232, 0.267, 0.261,
0.221, 0.219, 0.232, 0.209, 0.255)
boxplot(treat, cont,names=c("Treatment","Control"))
t.test(treat, cont , var.equal=T)
boxplot(treat, cont,names=c("Treatment","Control"))
t.test(treat, cont , var.equal=T)
boxplot(treat, cont,names=c("Treatment","Control"))
t.test(treat, cont , var.equal=T)
rats=read.table("http://www.uio.no/studier/emner/matnat/math/STK4900/data/
rats.txt",header=T)
rats=read.table("http://www.uio.no/studier/emner/matnat/math/STK4900/data/rats.txt",header=T)
rats$diet=factor(rats$diet) # defines diet to be a categorical variable
aov.rats=aov(time~diet,data=rats)
summary(aov.rats)
fvc=c(3.9,5.6,4.1,4.2,4.0,3.6,5.9,4.5,3.6,5.0,2.9,4.3)
pef=c(455,603,456,523,458,460,629,435,490,640,399,526)
cov(fvc,pef)
cov(fvc,pef)/(sd(fvc)*sd(pef))
cor(fvc,pef)
water=c(0.31,0.85,1.26,2.47,3.75)
erosion=c(0.82,1.95,2.18,3.02,6.07)
fit=lm(erosion~water)
summary(fit)
plot(water,erosion,pch=19)
abline(fit)
knitr::opts_chunk$set(echo = TRUE)
trees=read.table("http://www.uio.no/studier/emner/matnat/math/STK4900/data/trees.txt",header=T)
fit.both=lm(volume~diameter+height, data=trees)
summary(fit.both)
#### Residuals: $r_i = y_i - \hat{y}_1$
#### Fitted values {.tabset}
: $\hat{y}_i = \hat{beta}_0 + \hat{\beta_1x_{1i}} + ... + \hat{\beta_px_{pi}}$
plot(cars)
plot(cars)
plot(cars, title = "hello")
plot(cars, main = "hello")
plot(cars, main = "hello")
plot(cars, main = "hello")
<br>
#### Confidence Intervals
95% CI for $\beta_j$:
$$ \hat{\beta}_1 \pm c * se(\hat{\beta}_1), \\
\text {where c is the upper 97.5% percentile in the t-distribution} $$
